{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"","slug":"title","date":"2018-04-12T13:58:50.232Z","updated":"2018-04-12T14:00:00.547Z","comments":true,"path":"2018/04/12/title/","link":"","permalink":"http://yoursite.com/2018/04/12/title/","excerpt":"","text":"部署环境如下123centos 7python 3.6django 1.11.8 1.新建用户12adduser fsh #添加用户passwd fsh #设置密码 给新建用户授权(个人用户的权限只可以在本home下有完整权限，其他目录要看别人授权。)新建的用户并不能使用1```sudo```命令的授权管理是在```sudoers```文件里面 [root@VM_0_12_centos ~]# whereis sudoerssudoers: /etc/sudoers /etc/sudoers.d /usr/libexec/sudoers.so /usr/share/man/man5/sudoers.5.gz12.查看权限 [root@VM_0_12_centos ~]# ls -l /etc/sudoers-r–r—– 1 root root 3907 Jun 23 2017 /etc/sudoers 1这里```r```表示只读,我们需要添加写入权限 [root@localhost ~]# chmod -v u+w /etc/sudoersmode of “/etc/sudoers” changed from 0440 (r–r—–) to 0640 (rw-r—–)1现在就有写入权限，我们需要更改添加内容，追加到用户 [root@localhost ~]# vim /etc/sudoers12343.vim简单使用按```i```编写退出按一下```esc``` 输入```:``` 再输入```wq```保存退出```q```退出，```w```保存，```！```强制退出。找到root，在下面添加 Allow root to run any commands anywherroot ALL=(ALL) ALLfsh ALL=(ALL) ALL #fsh就是刚刚新增的用户1wq退出保存后，要把写的权限收回 [root@VM_0_12_centos ~]# chmod -v u-w /etc/sudoersmode of ‘/etc/sudoers’ changed from 0640 (rw-r—–) to 0440 (r–r—–) 1切换用户 su fsh12344.切换国内源1、备份```mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/ 123456789CentOS 5wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repoCentOS 6wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repoCentOS 7wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 3、之后运行makecache```生成缓存1安装python3.6可能会依赖的文件 yum groupinstall “Development tools” yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel12python1. 获取 wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgztar -xzvf Python-3.6.2.tgz -C /tmpcd /tmp/Python-3.6.2/12.把Python3.6安装到 /usr/local 目录 ./configure –prefix=/usr/localmakemake altinstall13.更改/usr/bin/python链接 ln -s /usr/local/bin/python3.6 /usr/bin/python3ln -s /usr/local//bin/pip3.6 /usr/bin/pip312maridb1. 安装 sudo yum install mariadb-server 12.启动， 重启 sudo systemctl start mariadb sudo systemctl restart mariadb 13.设置bind-ip vim /etc/my.cnf 在 [mysqld]: 下面加一行 bind-address = 0.0.0.0 14.设置外部ip可以访问 先进入mysql才能运行下面命令: mysql 直接进入就行 GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION; FLUSH PRIVILEGES 1234阿里云服务器需要开放端口，默认3306。nginx1.安装 sudo yum install epel-releasesudo yum install nginx12.启动 sudo systemctl start nginx13.如果系统开启了防火墙，开放http和https通信 sudo firewall-cmd –permanent –zone=public –add-service=httpsudo firewall-cmd –permanent –zone=public –add-service=httpssudo firewall-cmd –reload14.访问方式 http://服务器ip/15.设置自启 sudo systemctl enable nginx126.配置在项目下面新建conf/nginx/blog.conf文件 #user root; the upstream component nginx needs to connect toupstream django { server unix:///path/to/your/mysite/mysite.sock; # for a file socketserver 127.0.0.1:8000; # for a web port socket (we’ll use this first)} configuration of the servererror_log /home/fsh/fsh/project/error.log;server { the port your site will be served onlisten 80; the domain name it will serve forserver_name 118.24.154.138 ; # substitute your machine’s IP address or FQDNcharset utf-8; max upload sizeclient_max_body_size 75M; # adjust to taste Django medialocation /media { alias /home/fsh/fsh/project/blog_project_app/media; # 指向django的media目录}location /static { alias /home/fsh/fsh/project/blog_project_app/static; # 指向django的static目&gt;录} Finally, send all non-media requests to the Django server.location / { uwsgi_pass django; include uwsgi_params; # the uwsgi_params file you installed}} 1加入到启动配置文件中 sudo ln -s 你的目录/项目/conf/nginx/blog.conf /etc/nginx/conf.d/123virtualenvwrapper1.安装 pip install virtualenvwrapper12.编辑```.bashrc```文件 export WORKON_HOME=$HOME/.virtualenvssource /usr/local/bin/virtualenvwrapper.sh1```virtualenvwrapper.sh```这个文件路径查找方法 whereis virtualenvwrapper.sh13.重新加载```.bashrc```文件 source ~/.bashrc14.新建虚拟环境 mkvirtualenv blog15.进入虚拟环境 workon blog #导出本地虚拟环境的包pip freeze &gt; requirements.txt16.安装依赖包 pip install -r requirements.txt 12uwsgi1.安装 #需要在虚拟环境下安装pip install uwsgi1收集静态文件 STATIC_ROOT = os.path.join(BASE_DIR, “static/“)#加入到setting.py1运行命令 python manage.py collectstatic122.配置在项目目录下新建conf/uwsgi/uwsgi.ini mysite_uwsgi.ini file`[uwsgi] # Django-related settings # the base directory (full path) chdir = /home/fsh/fsh/project/blog_project_app/ # Django&apos;s wsgi file module = blog_project_app.wsgi # the virtualenv (full path) # process-related settings # master master = true # maximum number of worker processes processes = 4 threads = 2 # the socket (use the full path to be safe socket = 127.0.0.1:8000 # ... with appropriate permissions - may be needed # chmod-socket = 664 # clear environment on exit vacuum = true virtualenv = /home/fsh/.virtualenvs/Blog_app python-autoreload=1 logto = /tmp/mylog.log stats = %(chdir)/conf/uwsgi/uwsgi.status pidfile = %(chdir)/conf/uwsgi/uwsgi.pid 1234567```说明：python-autoreload=1 python文件修改自动重启nginxchdir： 表示需要操作的目录，也就是项目的目录module： wsgi文件的路径processes： 进程数virtualenv：虚拟环境的目录 进入虚拟环境1uwsgi -i ~/项目/conf/uwsgi/uwsgi.ini &amp; 运行nginx1sudo /usr/sbin/nginx 这里需要注意 一定是直接用nginx命令启动， 不要用systemctl启动nginx不然会有权限问题 我们上面配置了12stats = %(chdir)/conf/uwsgi/uwsgi.statuspidfile = %(chdir)/conf/uwsgi/uwsgi.pid 两个文件可以让uwsgi服务启动(start)停止(stop)重新装载(reload)1cat uwsgi/uwsgi.pid 执行后可以看到pid号 查看uwsgi进程1ps aux | grep uwsgi 发现uwsgi主进程和上面的pid一样 重启uwsgi1uwsgi --reload uwsgi/uwsgi.pid 停止1uwsgi --stop uwsgi/uwsgi.pid 这个命令返回一个json串，显示进程和worker的状态很详细1uwsgi --connect-and-read uwsgi/uwsgi.status","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-04-12T13:39:23.485Z","updated":"2018-04-12T13:39:23.486Z","comments":true,"path":"2018/04/12/hello-world/","link":"","permalink":"http://yoursite.com/2018/04/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}